## -------------------------------------------------------------------------
##   
##   Qube Submit After Effects (aerender)
##
##   Copyright: PipelineFX L.L.C. 
##
## -------------------------------------------------------------------------

import os, sys
sys.path.insert(0, '/Applications/pfx/qube/api/python/qb/gui')
sys.path.insert(0, '/Volumes/theGrill/.qube/SimpleCMDs/simplejson.egg')

from simplecmd import SimpleSubmit
import wx
import logging
import simplejson as json
import shutil
from time import gmtime, strftime
import subprocess, shlex
import hashlib

import AEData

# == import qb ==
# Determine qbdir (currently used for locating qb module and docs)
if os.environ.get('QBDIR', '') != '':  # if QBDIR exists and is not empty
    qbdir = os.environ['QBDIR'].strip()
    print "Qube location (from QBDIR): '%s'" % qbdir
else:
    # Determine QBDIR from platform defaults
    if sys.platform == 'darwin': # mac
        qbdir = '/Applications/pfx/qube'
    elif sys.platform[:5] == 'linux': # matches linux*
        qbdir = '/usr/local/pfx/qube'
    elif sys.platform[:3] == 'win':
        qbdir = 'c:/Program Files/pfx/qube'
    else:
        print ("ERROR: Unknown platform %s" % sys.platform)
        sys.exit(-1)
    print "Qube location (default): %s" % qbdir
sys.path.append('%s/api/python' % qbdir)
print 'Appending to python path "%s/api/python"' % qbdir
import qb

DATAPREFIX = ".DATA."
COMPRESSSORPRESETS = "/Volumes/theGrill/Resource_Library/Art_Anim/Presets/Compressor"
AERENDER = "/Applications/Adobe After Effects CS5/aerender"
COMPRESSORX = "/Volumes/theGrill/Resource_Library/Art_Anim/Scripts/Qube/compressorx"
QUBECLUSTER = "bchap"
QUBESUBMISSIONSFOLDERNAME = "_Qube_Submissions"

def create():        
    cmdjob = SimpleSubmit('AERenderX', hasRange=False, canChunk=False, help='After Effects rendering with progress and more.', category="2D", controlChanged=controlChanged, preDialog=preDialog, postDialog=postDialog, postSubmit=postSubmit)

    # Initialize the AE Data Class
    cmdjob.aeData = aeData()

    # Project Information
    cmdjob.add_optionGroup('Info')
    cmdjob.add_option( 'projectPath', 'file' , 'Project Name', label='Project File',
                        mode='open', required=True, editable=True)
    cmdjob.add_option( 'rqIndex', 'choice', 'RQ Item index and comp name.', label='RQ Item',
                        required=True, editable=True)
    cmdjob.add_option( 'outputs', 'choice', 'Output Paths.', label='Outputs',
                        required=True, editable=False, multi=True, choices=['None'])
    
    # Required
    cmdjob.add_optionGroup('Required', collapsed=False)
    cmdjob.add_option( 'notes', 'string', 'Notes about render', label='Notes',
                        required=True, lines=4, default=' ')
    cmdjob.add_option( 'email', 'string', 'Notification Email Address(s)', label='Email',
                        required=True, lines=1, default='')

    # Additional properties to set
    cmdjob.properties['flagsstring'] = 'disable_windows_job_object'  # Needs to be disabled for Windows
    
    # Set some default job options
    cmdjob.properties['hostorder'] = '+host.memory.avail'
    cmdjob.properties['reservations'] = 'host.processors=1+' # Reserve all cpus for the one job
    cmdjob.package.setdefault('shell', '/bin/bash')
    
    return [cmdjob]

# Custom method to update the choices for listboxes
# The SimpleCMD framework only supports updating values directly
def updateChoiceList(dlg, valuesPkg, optName, newChoices, selection):
        logging.debug("Updating ChoiceList: " + str(optName) + " Selection: " + str(selection))
        for s in dlg.propertyBoxSizers:
            if (optName in s.optionNames):
                s.options[optName]['choices'] = newChoices
                s.widgets[optName]['entry'].Clear() # Clear the current choices
                s.widgets[optName]['entry'].AppendItems(newChoices)
                if isinstance(selection, list):
                    if (len(selection) > 0):
                        for sel in selection:
                            s.widgets[optName]['entry'].Check(sel)
                else:
                    s.widgets[optName]['entry'].SetSelection(selection)


# Updates dialog when controls are changed
def controlChanged(cmdjob, values, optionName, value, dlg, container):

    # Pointers
    valuesPkg = values.setdefault('package', {})
    data = cmdjob.aeData

    # Project Path Updates
    if (optionName == "projectPath"):
        # Make sure the file exists and is an after effects project before updating
        if (os.path.exists(value) and os.path.splitext(value)[1] == '.aep'):
            
            projectPath = value

            # Set the qube job name to the name of the ae project without extension
            values['name'] = os.path.splitext(os.path.basename(projectPath))[0]
            
            # Determing the path to the AE Data File
            projectPathSplit = os.path.split(projectPath)
            data.path = os.path.join(projectPathSplit[0], DATAPREFIX + projectPathSplit[1])

            getDataFile = False # Sentinel to check if we need to get a new data file
            
            # Check whether the data file exists or not
            if os.path.exists(data.path):
                logging.debug("Data file found:\n" + data.path)
        
                # Load the data and check the hash
                dataFile = open(data.path, 'r')
                jsonData = json.load(dataFile)
                data.loadData(jsonData)
        
                # Calculate the hash of the project file
                proj = open(projectPath, 'rb').read()
                projHash = hashlib.md5(proj).hexdigest()
                logging.debug("Project Hash Code: " + projHash)

                # Compare this hash to the hash stored in the file
                logging.debug("Data Hash Code: " + str(data.projectHash))
                if (str(projHash) != str(data.projectHash)):
                    getDataFile = True
                    logging.info("Hash Codes don't match between the project and data file.")
                    
            else:
                getDataFile = True
                logging.info("No data file found for project.")

            if (getDataFile):
                # Run aerenderx with the getdatafile flag to generate the data
                cmd = "\"" + AERENDER + "\""
                cmd += " -project " + projectPath
                cmd += " -getdatafile"
    
                logging.info("Generating Data File...")
                logging.debug("Data File CMD: " + cmd)
                progDlg = wx.ProgressDialog ( 'Loading Project Data...', 'Lauching After Effects...', maximum = 100)
                p = subprocess.Popen(shlex.split(cmd))
                progDlg.Update( 25, 'Retrieving Data...')
                p.wait()
                logging.debug("Get Data File Exit Code: " + str(p.returncode))
                progDlg.Update( 100, 'Complete!')
                if (p.returncode != 123):
                    raise("Error obtaining data file.")
                else:
                    # Load the data from the new file
                    dataFile = open(data.path, 'r')
                    jsonData = json.load(dataFile)
                    data.loadData(jsonData)
                    
            # If specified, get the rqIndex passed from After Effects
            rqIndex = valuesPkg.get('rqIndex', '1').strip()
            if not rqIndex.isdigit():
                rqIndex = 1
            
            # Override with settings from After Effects if present
            if (data.selRQIndex != ''):
                rqIndex = int(data.selRQIndex[0])
                # Remove it now that we've used it
                data.selRQIndex = ''
            
            # Load the RQ Item Choices into the dialog
            rqChoices = data.getRQChoices()
            logging.debug("Updating Render Choices: " + str(rqChoices))
            updateChoiceList(dlg, valuesPkg, 'rqIndex', rqChoices, int(rqIndex)-1)

            # Locate the rqItem with the specified index
            rqItem = data.getRQIndex(rqIndex)
            
            # Load the outputs list box
            outputs = rqItem.getOutputNames()
            # Make all outputs selected
            selection = []
            for i in range(0, len(outputs)):
                selection.append(i)
            updateChoiceList(dlg, valuesPkg, 'outputs', outputs, selection)
            
            # Use expand flag if the output is a sequence
            sequence = False
            for item in outputs:
                if isSequence(item):
                    sequence = True
            if sequence:
                values['flagsstring'] = values['flagsstring'] + ",expand"
            else:
                values['flagsstring'] = values['flagsstring'].replace(',expand', '')
            
        else:
            valuesPkg = values.setdefault('package', {})
            # Prompt user that there was an error loading the project file
            updateChoiceList(dlg, valuesPkg, 'rqIndex', ['Invalid Project File'], 0)
            # Clear the outputs field
            updateChoiceList(dlg, valuesPkg, 'outputs', ['None'], [])

    # rqItem dropdown
    elif (optionName == "rqIndex"):
        # Check first character of the list box value to make sure it's a valid RQ Item
        if value[0].isdigit():
            rqIndex = value[0]
            rqItem = data.getRQIndex(rqIndex)
            outputs = rqItem.getOutputNames()
            # Make all outputs selected
            selection = []
            for i in range(0, len(outputs)):
                selection.append(i)
            updateChoiceList(dlg, valuesPkg, 'outputs', outputs, selection)
            
            # Use expand flag if the output is a sequence
            sequence = False
            for item in outputs:
                if isSequence(item):
                    sequence = True
            if sequence:
                values['flagsstring'] = values['flagsstring'] + ",expand"
            else:
                values['flagsstring'] = values['flagsstring'].replace(',expand', '')
        


# Setup the submission dialog
def preDialog(cmdjob, values):
    
    # Store the rqIndex that After Effects sends
    valuesPkg = values.setdefault('package', {})
    
    rqIndex = valuesPkg.get('rqIndex', '');
    if (rqIndex != ''):
        cmdjob.aeData.selRQIndex = rqIndex
    
    #################################################################################################################
    #
    # Fill in the Compressor Section
    #
    #################################################################################################################

    # Populate the list of Compressor Settings from a folder
    settingsFiles = os.listdir(COMPRESSSORPRESETS)
    
    settings = []
    for setting in settingsFiles:
        setting = os.path.splitext(setting) # Trim the extension off
        if (setting[1] == ".setting"):
            settings.append(setting[0])

    # if len(settings) > 0:
    #     cmdjob.options['compressorSettings']['choices'] = settings
    # cmdjob.options['compressorSettings']['lines'] = len(settings) + 1

# Cleanup & create copy of project to render from
def postDialog(cmdjob, values):
    
    valuesPkg = values.setdefault('package', {})

    #################################################################################################################
    #
    # Create a copy of the original project to render from
    #
    #################################################################################################################
    
    sourceFilePath = valuesPkg.get('projectPath', '')
	
    #Create the time string to be placed on the end of the AE file
    fileTimeStr = strftime("_%m%d%y_%H%M%S", gmtime())

    #Copy the file to the project files folder and add the time on the end
    sourceFolderPath, sourceFileName = os.path.split(sourceFilePath)
    newFolderPath = os.path.join(sourceFolderPath,QUBESUBMISSIONSFOLDERNAME)
    newFileName = os.path.splitext(sourceFileName)[0] + fileTimeStr + '.aep'
    newFilePath = os.path.join(newFolderPath, newFileName)

    # Make the new folder
    try:
        if not (os.path.exists(newFolderPath)):
            os.mkdir(newFolderPath)
    except:
        raise("Unable to create the folder " + newFolderPath)

    # Copy the file
    try:
        shutil.copy2(sourceFilePath, newFilePath)
        logging.info("Project file copied to " + newFilePath)
    except:
        raise("Unable to create a copy of the project under " + newFilePath)
    
    # Store the projectPaths
    valuesPkg['projectPath'] = sourceFilePath
    valuesPkg['renderProjectPath'] = newFilePath

    
    #################################################################################################################
    #
    # Add the email callbacks
    #
    #################################################################################################################
    
    mail = valuesPkg.get('email', '')
    # If there is no @ specified, supply @fellowshipchurch.com
    if not ("@" in mail):
        mail = mail + "@fellowshipchurch.com"
    values['mailaddress'] = mail
    values['callbacks'] = [{'triggers':'done-job-self', 'language':'mail'}]
    logging.info("Callbacks: " + str(values['callbacks']))
    if valuesPkg.has_key('email'):     del valuesPkg['email'] # Delete the original option for cleanlinesss

    #################################################################################################################
    #
    # Move the notes to the qube notes field
    #
    #################################################################################################################

    notes = valuesPkg.get('notes', '')
    values['notes'] = notes
    if valuesPkg.has_key('notes'):     del valuesPkg['notes'] # Delete the original option for cleanlinesss

    #################################################################################################################
    #
    # Setup the After Effects Render
    #
    #################################################################################################################

    # Set up the frame agenda to record percent progress
    values['agenda'] = qb.genframes("1-100")

    # If a compressor setting was specified,
    # then load the settings to the package
    if (valuesPkg.has_key('compressorSettings')):

        # Make sure there was a destination specified
        if not (valuesPkg.has_key('compressorDestination')):
            dlg = wx.MessageDialog(None, 'No Destination Specified for Compressor Output.', caption="ERROR",\
                style=wx.OK | wx.CENTRE | wx.ICON_ERROR, pos=(-1, -1))
            dlg.ShowModal()
            raise("No Destination for compressor output.")

        # Make sure there's a value for copy
        if (valuesPkg.has_key('compressorCopy')):
            copy = valuesPkg.get('compressorCopy', '')
        else:
            copy = 'asneededcopy'

        # Make sure there's a value for priority    
        if (valuesPkg.has_key('compressorPriority')):
            priority = valuesPkg.get('compressorPriority', '')
        else:
            priority = 'medium'

        valuesPkg['compressorSettings'] = valuesPkg.get('compressorSettings', '')
        valuesPkg['compressorCopy'] = copy
        valuesPkg['compressorPriority'] = priority
        valuesPkg['compressorAudio'] = valuesPkg.get('compressorAudio', '')
        valuesPkg['compressorDestination'] = valuesPkg.get('compressorDestination', '')

    
def postSubmit(cmdjob, submittedJobs):
    
    #################################################################################################################
    #
    # Setup the Compressor task
    #
    #################################################################################################################
    
    aeJob = submittedJobs[0]
    
    if (aeJob['package'].has_key('compressorSettings')):
        logging.info('Compressor Job Settings Found')
            
        compJob = qb.Job()
        compJob['prototype'] = 'cmdline'
        compJob['agenda'] = qb.genframes("1-100") # Agenda to record progress
        compJob['pgrp'] = aeJob['pgrp']
        compJob['dependency'] = 'link-complete-job-%i' % aeJob['id']
        compJob['groups'] = 'Compressor'
        compJob['hostorder'] = '+host.memory.avail'
        compJob['reservations'] = ''

        jobs = []
        outputs = aeJob['package'].get('outputPaths', '').split(",")
        for output in outputs:
        
            outputPath = output
            if isSequence(output):
                outputPath = os.path.dirname(output)

            destination = aeJob['package'].get('compressorDestination', '')

            cmd = COMPRESSORX
            cmd += " --copy " + aeJob['package'].get('compressorCopy', '')
            cmd += " --clustername \"" + QUBECLUSTER + "\""
            cmd += " --clusterpassword \"Monkey-2\""
            cmd += " --priority " + aeJob['package'].get('compressorPriority', '')            
            cmd += " --jobpath \"" + outputPath + "\""
            cmd += " --settingpath \"" + os.path.join(COMPRESSSORPRESETS, aeJob['package'].get('compressorSettings', '') + ".setting") + "\""
            cmd += " --destinationpath \"" + destination + "\""
            cmd += " --framerate " + aeJob['package'].get('frameRate', '')
        
            # Add audio file flag if audio was added in the dialog
            audio = aeJob['package'].get('compressorAudio', '')
            if (audio != "" or audio != None):
                cmd += " --audio \"" + os.path.abspath(audio) + "\""

        
            compJob['name'] = 'CMP: ' + os.path.basename(destination)
            compJob['package'] = {'cmdline' : cmd, 'shell' : '/bin/bash'}
            jobs.append(compJob)
        
        newJobs = qb.submit(jobs)
        
        logging.info('Compressor Job Submitted')
        
        submittedJobs.extend(newJobs)
    
    
## ======================================================================


if __name__ == '__main__':
    import logging
    import sys
    import simplecmd
    import submit
    logging.basicConfig(level=logging.DEBUG)
    app = simplecmd.TestApp(redirect=False)
    cmds = create()
    logging.info("Monkey")
    for cmd in cmds:
        simplecmd.createSubmitDialog(cmd)
    app.MainLoop()
