// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------////  Elevate commandLineRenderer Selector v1//// Check the master copy of the script on the network.// If the copy on the net is newer than the local copy, update the local copy first.// Then run the local copy of the scriptLoad the script from the network if available.  If not, use the local copy.//// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------var clrLogFile = new File("/tmp/commandLineRenderer.log");clrLogFile.open('w');clrLogFile.lineFeed = "Macintosh";//// Allow for multiple versions of the commandLineRenderer to be used// versions://      default//      experimental//      backup//var scriptVersion = "default";//// The master scripts is stored on the Grill under the qube jobtype// This will be pathConverted later//var networkScriptPath = "/Volumes/Grill/.qube/Jobtypes/Submit After Effects v2/Scripts_Remote/commandLineRenderer/" + scriptVersion+ ".jsx";//// The local copy of the script is placed in the users after effects preferences folder.// This allows different users to use different commandLineRenderers.// This also resolves security issues of writing to the main Applications folder.//var appVers = app.version.match(/(\d+\.\d).*/)[1];clrLogFile.writeln("App Version: " + appVers.toString());var localScriptFile= new File("~/Library/Preferences/Adobe/After Effects/" + appVers + "/commandLineRenderer_" + scriptVersion + ".jsx");clrLogFile.writeln("localScriptFile: " + localScriptFile.fsName);// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------loadPathConvert = function () {    // Read in the list of renderMounts    // Load the renderMounts file    path = "~/.renderMounts";    f = new File(path);    mounts = [];    if (f.exists) {        f.open('r');        data = f.read();        f.close();        // Ignore commented lines        lines = data.split("\n");        for (var i=0; i<lines.length; i++) {            if (lines[i].charAt(0) != "#" && lines[i].length > 1) {                clrLogFile.writeln("renderMount: " + lines[i]);                mounts.push(lines[i]);            }        }    }    return mounts;}pathConvert = function(value, mounts) {    // pathConvert the input string    result = value.toString();    for (var i=0; i<mounts.length; i++) {        try {            // Separate the mount point            // [0] AFP Mount URL [1] Normal Mount Path [2]Background Mount Path                        mount = mounts[i].split(",");            result = result.replace(mount[1], mount[2]);            clrLogFile.writeln("CONVERT: " + value.toString() + " -> " + result);        } catch(error) {            clrLogFile.writeln("ERROR: Unable to convert paths.");            clrLogFile.writeln("ERROR: " + error.toString() + " File: " + error.file + " Line: " + error.line);        }    }        return result  }function getMD5(myFile) {    var cmd = "python -E -c \"import hashlib; print hashlib.md5(open('PATH', 'rb').read()).hexdigest()\"";    cmd = cmd.replace('PATH', myFile.fsName);    return system.callSystem(cmd).replace("\n", "");}function getScriptFile() {        // Path Convert the networkScriptFile    var mounts = loadPathConvert();    networkScriptPath = pathConvert(networkScriptPath, mounts);        var scriptFile = localScriptFile;    clrLogFile.writeln("Looking for networkScript: " + networkScriptPath);    networkScriptFile = new File(networkScriptPath);    if (networkScriptFile.exists == true) {        var copy = false;        clrLogFile.writeln("networkScript exists. Checking if local copy is up to date...");        var networkScriptMD5 = getMD5(networkScriptFile);        if (localScriptFile.exists == true) {            var localScriptMD5 = getMD5(localScriptFile);            if (networkScriptMD5 === localScriptMD5) {                clrLogFile.writeln("localScript is up to date with networkScript.");            } else {                 clrLogFile.writeln("localScript is not up to date with networkScript.");                copy = true;            }        } else {           clrLogFile.writeln("localScript doesn't exist.");           copy = true;        }        if (copy == true) {            clrLogFile.writeln("Copying the network script locally.");            networkScriptFile.copy(localScriptFile);        }            } else if (localScriptFile.exists == true) {        clrLogFile.writeln("networkScript not found.  Using local copy as is.");    } else {        clrLogFile.writeln("networkScript and localScript not found, using backup.");        // Backup script file located in the same directory.        // This is the after effects original.        var thisScriptFile = new File($.fileName);        scriptFile = new File(thisScriptFile.parent.fsName + "/(backup)/commandLineRenderer.jsx");        if (scriptFile.exists != true) {            clrLogFile.writeln("FATAL: Unable to find any commandLineRenderer.\n");        }    }    return scriptFile;}try {    var scriptFile = getScriptFile();    // Run the script    clrLogFile.writeln("Running scriptFile: " + scriptFile.fsName + "\n");    $.evalFile(scriptFile);    clrLogFile.writeln("Script loaded!");    } catch (err) {    clrLogFile.writeln("Error: " + err.toString());}