// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------////  Elevate commandLineRenderer Selector v1//// Check the master copy of the script on the network.// If the copy on the net is newer than the local copy, update the local copy first.// Then run the local copy of the scriptLoad the script from the network if available.  If not, use the local copy.//// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------var clrLogFile = new File("/tmp/commandLineRenderer.log");clrLogFile.open('w');clrLogFile.lineFeed = "Macintosh";//// Allow for multiple versions of the commandLineRenderer to be used// versions://      default//      experimental//      backup//var scriptVersion = "default";//// The master scripts is stored on theGrill under the qube jobtype//var networkScriptFile = new File("/Volumes/theGrill/.qube/Jobtypes/Submit After Effects v2/Scripts_Remote/commandLineRenderer/" + scriptVersion+ ".jsx");//// The local copy of the script is placed in the users after effects preferences folder.// This allows different users to use different commandLineRenderers.// This also resolves security issues of writing to the main Applications folder.//var appVers = app.version.match(/(\d+\.\d).*/)[1];clrLogFile.writeln("App Version: " + appVers.toString());var localScriptFile= new File("~/Library/Preferences/Adobe/After Effects/" + appVers + "/commandLineRenderer_" + scriptVersion + ".jsx");clrLogFile.writeln("localScriptFile: " + localScriptFile.fsName);// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------function getMD5(myFile) {    var cmd = "python -E -c \"import hashlib; print hashlib.md5(open('PATH', 'rb').read()).hexdigest()\"";    cmd = cmd.replace('PATH', myFile.fsName);    return system.callSystem(cmd).replace("\n", "");}function getScriptFile() {        var scriptFile = localScriptFile;    clrLogFile.write("Looking for networkScript: " + networkScriptFile.fsName + "\n");    if (networkScriptFile.exists == true) {        var copy = false;        clrLogFile.write("networkScript exists. Checking if local copy is up to date...\n");        var networkScriptMD5 = getMD5(networkScriptFile);        if (localScriptFile.exists == true) {            var localScriptMD5 = getMD5(localScriptFile);            if (networkScriptMD5 === localScriptMD5) {                clrLogFile.write("localScript is up to date with networkScript.\n");            } else {                 clrLogFile.write("localScript is not up to date with networkScript.\n");                copy = true;            }        } else {           clrLogFile.write("localScript doesn't exist.\n");           copy = true;        }        if (copy == true) {            clrLogFile.write("Copying the network script locally.\n");            networkScriptFile.copy(localScriptFile);        }            } else if (localScriptFile.exists == true) {        clrLogFile.write("networkScript not found.  Using local copy as is.\n");    } else {        clrLogFile.write("networkScript and localScript not found, using backup.\n");        // Backup script file located in the same directory.        // This is the after effects original.        var thisScriptFile = new File($.fileName);        scriptFile = new File(thisScriptFile.parent.fsName + "/(backup)/commandLineRenderer.jsx");        if (scriptFile.exists != true) {            clrLogFile.write("FATAL: Unable to find any commandLineRenderer.\n");        }    }    return scriptFile;}try {    var scriptFile = getScriptFile();    // Run the script    clrLogFile.write("Running scriptFile: " + scriptFile.fsName + "\n");    $.evalFile(scriptFile);    clrLogFile.writeln("Script loaded!");    } catch (err) {    clrLogFile.write("Error: " + err.toString());}