// ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------// Qube Tools// Author: Brennan Chapman// Version: 1.0// Date: 5/26/2011//// Provides methods to gather project data// and submit projects to Qube//// // Gathers all of the relevate info about a project into a JSON object// that can be used for Qube or other purposes.// ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------#include "json.js"if (Qube === undefined) {    var Qube = (function () {        var scriptName = "Qube_Tools.jsx",        version = "1",        /**         * <p>The current debug level. Each level builds upon the previous         * level. Errors are automatically output to the log. Possible values:         * <ul>         * <li>0 - No information output to console</li>         * <li>1 - Info output to the console</li>         * <li>2 - Warnings and Info output to the console</li>         * </ul>         *</p>         * @type {Int}         */        debug = 3;        /**            * Prefix to use for the data files            */        dataPrefix = ".DATA.";        return {            /**             * Returns the current version of the COB object.             *             * @see #version             * @return {String}             */            "getVersion": function () {                return version;            },            "debug": debug,            "scriptName": scriptName,            "dataPrefix": dataPrefix        };    }());    // Gather all the info about the render queue    Qube.getRenderQueue = function () {        var rq = app.project.renderQueue;        var rqItems = [];        var count = 0;        for (var i=1; i<=rq.items.length; i++) {            rqItem = {}            rqItem.index = i;            rqItem.comp = rq.items[i].comp.name;            rqItem.compDuration = parseFloat(timeToCurrentFormat(rq.items[i].comp.duration, rq.items[i].comp.frameRate)).toFixed(0);            rqItem.outFilePaths = []            rqItem.frameRate = rq.items[i].comp.frameRate.toFixed(2);            rqItem.startTime = parseFloat(timeToCurrentFormat(rq.items[i].timeSpanStart, rqItem.frameRate)).toFixed(0);            rqItem.duration = parseFloat(timeToCurrentFormat(rq.items[i].timeSpanDuration, rqItem.frameRate)).toFixed(0);            rqItem.stopTime = parseFloat(parseInt(rqItem.startTime) + parseInt(rqItem.duration));            rqItem.status = rq.items[i].status;            rqItem.render = rq.items[i].render;                        for (var o=0; o<rq.items[i].outputModules.length; o++) {                rqItem.outFilePaths[o] = rq.items[i].outputModules[o+1].file.fsName;            }            rqItems[count++] = rqItem;        }        return rqItems;    };    // Gather all the info about the comps    Qube.getComps = function () {        var comps = [];        var count = 0;        for (var i=1; i<=app.project.items.length; i++) {            if (app.project.items[i] instanceof CompItem) {                var c = app.project.items[i];                var comp = {};                comp.name = c.name;                comp.duration = parseFloat(timeToCurrentFormat(c.duration, c.frameRate)).toFixed(0);                comp.frameRate = c.frameRate.toFixed(2);                comps[count++] = comp;            }        }        return comps;    };    // Gather all the info about the project    Qube.getProject = function () {        var project = {};        project.path = app.project.file.fsName;        // Generate the project file hash code using python        var cmd = "python -c \"import hashlib; print hashlib.md5(open('PATH', 'rb').read()).hexdigest()\"";        cmd = cmd.replace('PATH', '/tmp/test.aep');        project.hash = system.callSystem(cmd).replace("\n", "");                return project;    };    Qube.saveDataFile = function(data) {                var path = app.project.file.path + "/" + Qube.dataPrefix + app.project.file.name;        //$.wrlteln(path);        var dataFile = new File(path);        dataFile.open('w');        dataFile.write(data);        dataFile.close();    };    // Main Function    Qube.makeDataFile = function () {                // Switch the timecode type to frames        currTimeFormat = app.project.timecodeDisplayType;        app.project.timecodeDisplayType = TimecodeDisplayType.FRAMES;        var data = {}        // Gather the data into an object        data.project = Qube.getProject();        data.comps = Qube.getComps();        data.rqItems = Qube.getRenderQueue();        var data = JSON.stringify(data);        Qube.saveDataFile(data);                // Switch the timecode type back to original format        app.project.timecodeDisplayType = currTimeFormat;                return data;    };};// ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------